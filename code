from playwright.sync_api import sync_playwright, Playwright, expect

def run(playwright: Playwright):
    browser = playwright.chromium.launch(headless=False)
    # Optional: give yourself more time globally
    # browser_context = browser.new_context(no_viewport=True)  # if you really want no viewport, do it on the context
    # ecwpage = browser_context.new_page()
    ecwpage = browser.new_page()

    # --- ECW login ---
    ecwpage.goto("https://txclstf6p3vy7rz5judqcxapp.ecwcloud.com/mobiledoc/jsp/webemr/login/newLogin.jsp")
    ecwpage.fill("#doctorID", "benefits.hiisight")
    ecwpage.click("#nextStep")
    ecwpage.fill("#passwordField", "Pbhoustonbilling@2025")
    ecwpage.click("#Login")
    ecwpage.click("#altTFAMsg")
    ecwpage.click("#altTFASend")

    # --- 1&1 IONOS login for MFA ---
    emailpage = browser.new_page()
    emailpage.goto("https://id.ionos.com/identifier")
    emailpage.fill("#username", "cls@hiisight.com")
    emailpage.click("#button--with-loader")
    emailpage.fill("#password", "Ravi@144311")
    emailpage.click("#button--with-loader")

    # Open first message
    emailpage.locator('[data-index="0"]').click()

    # Click the "Yes, it's me" link inside the email iframe
    # Use frame_locator (don't chain .content_frame directly)
    link = emailpage.frame_locator('iframe[title="Email content"]').get_by_role("link", name="Yes, it's me")

    # Sometimes this opens a new tab; sometimes it navigates same tab. Handle both.
    try:
        with emailpage.expect_popup() as popup_info:
            link.click()
        popup = popup_info.value
        popup.close()
    except Exception:
        # If no popup, just try a direct click with a short wait for navigation
        try:
            with emailpage.expect_navigation():
                link.click()
        except Exception:
            pass  # best-effort; MFA providers vary

    emailpage.close()

    # --- Navigate inside ECW ---
    ecwpage.wait_for_selector("#jellybean-panelLink4")
    ecwpage.click("#jellybean-panelLink4")

    ecwpage.wait_for_selector("#Practice_menu")
    ecwpage.click("#Practice_menu")
    ecwpage.click("#RESOURCE_SCHEDULING_PRACTICE")

    ecwpage.wait_for_selector("#allResources")
    ecwpage.click("#allResources")
    ecwpage.click("#allResources")

    ecwpage.fill("#resourceScheduleIpt2", "pet")
    ecwpage.locator('[id="613181"]').click()  # using attribute selector is safest for numeric ids

    #ecwpage.wait_for_selector("#allProviders")
    #ecwpage.click("#allProviders")
    #ecwpage.wait_for_selector('[data-bb-handler="Yes"]')
    #ecwpage.locator('[data-bb-handler="Yes"]').click()
    #ecwpage.click("#allProviders")

    # dp = ecwpage.locator('.ui-datepicker-calendar').first
    # dp.locator('td[data-month="8"][data-year="2025"] a[data-date="2"]').click()


    # --- Calendar waits: target the actual visible events, not hidden containers ---
    # Prefer .fc-event (the actual event items) and ensure they become visible.
    events = ecwpage.locator(".fc-event")
    expect(events).not_to_have_count(0)  # replaces "not_to_be_empty"
    events.first.wait_for(state="visible")  # ensures at least one is visible

    # --- Find elements whose id starts with "enc:" and double-click each ---
    # IMPORTANT: For attribute selectors, do NOT escape the colon.
    elements = ecwpage.locator('[id^="enc\\:"]')

    count = elements.count()
    print(f"Found {count} elements starting with id enc:")
    for i in range(count):
        element_id = elements.nth(i).get_attribute("id")
        print("enc id:", element_id)

        # Avoid "#{id}" because ':' must be escaped; use attribute equality instead:
        ecwpage.locator(f'[id="{element_id}"]').dblclick()

        try: 
            ecwpage.locator(f'[id="billingAlertBtn6"]').wait_for(state="visible")        
            ecwpage.locator(f'[id="billingAlertBtn6"]').click()
        except Exception:
            pass

        try:
            # ecwpage.get_by_role("button", name="Cancel").wait_for(state="visible").click()
            ecwpage.locator("button.btn.btn-xs.mt10.mr10.commonButton.ng-binding.ng-scope.btn-lgrey").wait_for(state="visible", timeout=7000)
            ecwpage.locator("button.btn.btn-xs.mt10.mr10.commonButton.ng-binding.ng-scope.btn-lgrey").click()
        except:
            print("No email missing dialog")
            pass

        #ecwpage.pause()

        # If a dialog/panel opens, wait for something meaningful here (example):
        ecwpage.locator("#newApptDialog").wait_for(state="visible", timeout=15000)
        # span = ecwpage.locator("#visit-status-lookupBtn1").nth(1)
        # bg = span.evaluate("el => getComputedStyle(el).backgroundColor")
        # print(bg)

        # All "visit status" color swatches (the colored <span> inside the left button)
        swatch = ecwpage.locator('button#visit-status-lookupBtn1 >> span.visit-color-box-disable')

        count = swatch.count()
        print("Found swatches:", count)
        # if count < 2:
            # raise RuntimeError(f"Only found {count} swatch(es). The 'second' one isn't in the DOM yet.")

        # Read the computed background color of the SECOND swatch (index 1)
        color = swatch.evaluate("el => getComputedStyle(el).backgroundColor")
        print("visit status color:", color)

        ecwpage.locator('[id=newAppointmentBtn50]').click()




    ecwpage.pause()  # keep for debugging; remove for CI
    browser.close()

with sync_playwright() as p:
    run(p)
